#######################################################
# 
# abstract_file_reader.py
# Python implementation of the Class SensorFileReader
# Generated by Enterprise Architect
# Created on:      09-Jul-2017 21:09:12
# Original author: Laptop
# 
#######################################################
from abc import abstractmethod
from datetime import datetime

import sensor_file.file_parser.concrete_file_parser as file_parser

PARAMETER = 'parameter'
DATA_ACCES = 'data'




class AbstractFileReader(object):
    """Interface permettant de lire un fichier provenant d'un datalogger quelconque
    classe permettant d'extraire des données d'un fichier quelconque.
    Un fichier de donnée est en général composé de :
    - Entete d'information sur l'environnement de prise de données
    - Entete d'information sur les colonnes de données
    - Les colonnes de données
    """
    FILE_HEADER = 'file_header'             #   information about the file (compagny, site, setup date,...)
    FILE_DATA_HEADER = 'file_data_header'   #   information about the data (unit, parameters, ...)
    DATA_ACCES = 'data'                     #   records of the current file

    def __init__(self, file_name: str = None, header_length: int = 10):
        self._file = file_name
        self._header_length = header_length
        self.__file_internal_data = {self.FILE_HEADER: {},
                                     self.FILE_DATA_HEADER: {},
                                     self.DATA_ACCES: None}
        self.file_reader = None
        self._set_file_reader()

    def _set_file_reader(self):
        """
        set the good file parser to open and read the provided file
        :return:
        """
        file_ext = self.get_file_extension()
        if file_ext in ('dat', 'lev', 'xle'):
            self.file_reader = file_parser.TXTFileParser(self._file, self._header_length)
        elif file_ext in ('xls', 'xlsx'):
            self.file_reader = file_parser.EXCELFileParser(self._file, self._header_length)
        elif file_ext == 'csv':
            self.file_reader = file_parser.CSVFileParser(self._file, self._header_length)

    def get_file_extension(self):
        file_list = self._file.split(".")
        if len(file_list) == 1:
            raise ValueError("The path given doesn't point to a file name")
        if len(file_list) > 2:
            raise ValueError("The file name seems to be corrupted. Too much file extension in the current name")
        else:
            return file_list[-1].lower()

    @property
    def data(self):
        return self.__file_internal_data[DATA_ACCES]

    @property
    def parameters(self) -> dict:
        return self.__file_internal_data[self.PARAMETER]

    def get_data_at_time(self, at_date: datetime) -> list(Recording):
        """
        method that return a list of an unique Recording if the date match the
        Recording date or a list of all the Recording for the givent date
        :param at_date: datetime object corresponding to the needed Recording"""
        pass

    def get_data_between(self, first_date: datetime, last_date: datetime) -> list(Recording):
        """
        method that return a list of all the Recording for the given date interval
        :param first_date: start datetime object corresponding to the needed Recording
        :param last_date: end datetime object corresponding to the needed Recording
        :return: list
        """
        pass

    def get_data_list(self):
        pass

    @property
    def get_date_list(self):
        return list(self.__file_internal_data.keys())

    @property
    def end_date(self):
        return self.get_date_list[-1]

    @property
    def get_header(self):
        return self.__file_internal_data[self.FILE_DATA_HEADER]

    @property
    def start_date(self):
        return self.get_date_list[0]

    @abstractmethod
    def read_file(self):
        pass

    def _validate_file(self) -> bool:
        """
        Methode pemettant de valider un fichier.
        Celui-ci ne doit pas être NONE et doit contenir l'extension désirée
        :return:
        """
        return self._file is not None and self._validate_file_type

    @abstractmethod
    def _validate_file_type(self) -> bool:
        pass

    @abstractmethod
    def read_file_header(self):
        """
        Methode permettant de lire l'entete du fichier
        :return:
        """
        pass

    @abstractmethod
    def read_file_data_header(self):
        """
        Methode permettant de lire l'entete des colonnes de donnees
        :return:
        """
        pass

    @abstractmethod
    def read_file_data(self):
        """
        Methode pour ne recupérer que les donnees du fichier
        :return:
        """
        pass
