#######################################################
# 
# FileReader.py
# Python implementation of the Class SensorFileReader
# Generated by Enterprise Architect
# Created on:      09-Jul-2017 21:09:12
# Original author: Laptop
# 
#######################################################
from abc import abstractmethod
from collections import defaultdict, OrderedDict
from datetime import datetime
PARAMETER = 'parameter'
DATA_ACCES = 'data'


class Parameter(object):
    def __init__(self, param_name,unit):
        self.parameter = param_name
        self.unit = unit

class Recording(object):
    def __init__(self, date:str = None, data_list:list = None):
        self.date = date
        self.data_list = data_list

class FileReader(object):
    """Interface permettant de lire un fichier provenant d'un datalogger quelconque
    """
    def __init__(self, file_name):
        self._file = file_name
        self._data = defaultdict(OrderedDict)
        self._header = dict()
        self._parameter = []

    @property
    def get_data(self):
        return self._data[DATA_ACCES]

    @property
    def get_parameters(self):
        return self._parameter

    def get_data_at_time(self,at_date:datetime) -> list(Recording):
        """
        method that return a list of an unique Recording if the date match the
        Recording date or a list of all the Recording for the givent date
        :param at_date: datetime object corresponding to the needed Recording"""
        pass

    def get_data_between(self,first_date:datetime, last_date:datetime) ->list(Recording):
        """
        method that return a list of all the Recording for the given date interval
        :param first_date: start datetime object corresponding to the needed Recording
        :param last_date: end datetime object corresponding to the needed Recording
        :return: list
        """
        pass

    def get_data_list(self):
        pass

    @property
    def get_date_list(self):
        return list(self._data.keys())

    def get_end_date(self):
        return self.get_date_list[len(self.get_date_list)-1]
    @property
    def get_header(self):
        return self._header

    def get_start_date(self):
        return self.get_date_list[0]
    @abstractmethod
    def read_file(self):
        pass
